Uncharted Territory 基本設計書
1. はじめに
1.1. 本書の目的
本書は、放置型宇宙経済シミュレーションゲーム「Uncharted Territory」を開発するにあたり、システム全体の構成、主要な機能の仕様、データ構造、技術基盤などを定義することを目的とします。本書は、開発チーム内の共通認識を形成し、以降の詳細設計および実装フェーズの基礎となるものです。

1.2. 対象読者
本設計書は、本プロジェクトに関わる以下の関係者を対象とします。

プロジェクトマネージャー

ソフトウェアエンジニア（フロントエンド、バックエンド）

UI/UXデザイナー

QAエンジニア

2. システム概要
2.1. システム構成図
本システムは、Cloudflareのサーバレスプラットフォームを活用したアーキテクチャを採用します。クライアントとサーバーはWebSocketで常時接続され、リアルタイムなゲーム状態の更新を実現します。

コード スニペット

graph TD
    A[Client (ブラウザ)] -- WebSocket --> B{Cloudflare Edge};
    B -- HTTP Request/WebSocket --> C[Cloudflare Worker];
    C -- 認証 --> D[Cloudflare Access/Zero Trust];
    C -- ゲーム状態の永続化/読み書き --> E[Durable Objects];

    subgraph "Cloudflare Network"
        B
        C
        D
        E
    end
Client: ユーザーが操作するWebブラウザ。サーバーから受け取ったゲーム状態を描画し、ユーザー入力をサーバーに送信します。

Cloudflare Worker: ゲームのメインロジック（交易AI、価格変動、セクター発見など）を実行するサーバーサイドアプリケーション。

Durable Objects: 各プレイヤーのゲーム状態（資産、船団、セクター情報など）を永続化するためのストレージ兼実行環境。プレイヤーごとに一意のオブジェクトが割り当てられます。

2.2. 機能一覧
本ゲームの主要な機能を以下に示します。

大分類

中分類

機能概要

関連GDD

ゲームプレイ

交易AI

船が時間対効果最大の交易ルートを自律的に判断・実行する

4.1

経済システム

需要と供給に基づき、ステーションの在庫量に応じて商品価格がリアルタイムで変動する

4.2

生産・消費

各ステーションが60秒サイクルで商品を生産・消費する

4.2

セクター発見

総資産などのマイルストーン達成により、新しいセクターが自動的に解放される

4.1

競合システム

複数の船が同一商品を狙った場合、先に到達した船が取引を行う「早い者勝ち」ルール

4.1

プレイヤー操作

船の購入・売却

造船所で船を購入、または所有する船を売却する

6.2

交易AIの制御

船ごとに交易AIのON/OFFを切り替える

6.2

マップ操作

マウス操作によるマップのパン、ズームイン/アウト

6.2

情報表示

船団情報

所有する船のリスト、各船のステータス（位置、積荷、目的地）を表示

6.1, 6.3

ステーション情報

選択したステーションの在庫、価格情報を表示

6.1, 6.3

収支レポート

プレイヤーの収支履歴をログおよびグラフ形式で表示

6.1, 6.3


Google スプレッドシートにエクスポート
2.3. 技術スタック
領域

技術

目的

フロントエンド

TypeScript, React/Vue.jsなど

UI構築とサーバーとの通信

バックエンド

TypeScript, Cloudflare Workers

ゲームロジックの実行

通信プロトコル

WebSocket

リアルタイム双方向通信

データ永続化

Cloudflare Durable Objects

プレイヤーごとのゲーム状態の保存

認証

Cloudflare Access

ユーザー認証

リポジトリ

Monorepo

フロントエンドとバックエンドのコードを一元管理


Google スプレッドシートにエクスポート
3. 画面設計
3.1. 画面構成
本ゲームは単一のメイン画面で構成され、フローティングウィンドウによって各種情報が表示されます。

メインビュー（中央）: 宇宙空間全体を表すマップ。セクター、ゲート、船のアイコンが表示される。

船団パネル（左）: プレイヤーが所有する船のリストと簡易ステータス。

情報パネル（右）: マップ上のオブジェクト（ステーション、船など）を選択した際に詳細情報を表示。

その他UI要素: 造船所ボタン、収支ログボタンなど。

3.2. 画面レイアウト
GDD「6.1 画面レイアウト」に基づき、ミニマリストで機能的なUIを設計します。

背景: 黒基調。

要素: 蛍光色（ピンク、グリーン、ブルー）を使用し、視認性と未来的なデザインを両立。

マップ: セクターは四角い領域、ゲート間の接続は曲線で表現。船はシンプルなアイコンで示される。

(上記はレイアウトの概念図です)

4. 機能詳細設計
4.1. 交易AIロジック
各船の自律行動を決定するコアロジック。以下のフローで実行される。

トリガー:

取引完了時

取引失敗時（在庫切れなど）

交易AIがONに設定された時

スキャン: 既知の全ステーションの全商品について、価格情報を取得する。

ルート候補の算出:

現在地から購入可能な商品（購入価格 < プレイヤー所持金）をリストアップする。

各商品について、最も高く売れるステーションを探す。

「購入→売却」のペアで、期待利益 P を計算する。

P = (売却価格 - 購入価格) * 積載可能量

時間対効果の算出:

各ルート候補について、総所要時間 T を計算する。

T = (現在地から購入元への移動時間) + (購入元から売却先への移動時間) + (取引時間)

移動時間 = 距離 / 船の速度

時間対効果 E を計算する。

E = P / T

目的地決定: E が最大となるルートを選択し、購入元のステーションを目的地に設定して移動を開始する。

4.2. 価格決定メカニズム
ステーションの在庫量に応じて商品価格を決定する。

計算式:

$$$$$$価格 = P\_{max} - ((P\_{max} - P\_{min}) \\times 在庫率)$$
$$$$

変数:

P_{max}: 最高価格（基準価格の150%）

P_{min}: 最低価格（基準価格の50%）

在庫率: 現在の在庫量 / 最大在庫量

更新タイミング: 取引が発生し在庫が変動するたびにリアルタイムで再計算される。

4.3. セクター発見ロジック
ゲームの進行度に応じて新しいセクターを解放する。

トリガー: サーバーのゲーム更新ループ（例: 10秒ごと）でチェック。

条件判定: 以下のマイルストーンを達成しているか判定する。

総資産

総交易回数

（その他、将来的な拡張用のマイルストーン）

セクター生成:

条件を達成した場合、新しいセクターをプロシージャル生成する。

生成内容: ステーションのタイプと配置、ゲートの数（最大4つ）。

新セクターのゲートを、既存のいずれかのセクターの空きゲートにランダムで接続する。

通知: 新セクター発見の情報をクライアントに送信する。

5. データベース設計 (Durable Objects)
各プレイヤーのゲーム状態は、単一のDurable Object内にJSON形式で保持される。以下に主要なデータモデルの構造案を示す。

TypeScript

// PlayerDurableObject State
interface GameState {
  playerId: string;
  credits: number;
  totalTrades: number;
  lastUpdated: number; // タイムスタンプ
  
  ships: Ship[];
  sectors: Sector[];
  
  settings: {
    // ユーザー設定
  };
  
  transactionLog: Transaction[];
}

interface Ship {
  id: string;
  type: 'Mercury'; // 船種
  name: string;
  speed: number; // m/s
  capacity: number;
  isAIEnabled: boolean;
  
  location: { x: number; y: number; sectorId: number; };
  destination: { stationId: string; } | null;
  cargo: { commodityId: string; quantity: number; } | null;
  status: 'Idle' | 'Trading' | 'MovingToBuy' | 'MovingToSell';
}

interface Sector {
  id: number;
  name: string;
  gates: { targetSectorId: number | null; }[];
  stations: Station[];
}

interface Station {
  id: string;
  type: 'Mine' | 'Factory' | 'Trading Hub';
  name: string;
  location: { x: number; y: number; };
  production: { commodityId: string; amount: number; }; // 生産物
  consumption: { commodityId:string; amount: number; }[]; // 消費物
  inventory: { commodityId: string; quantity: number; price: number; }[];
}

interface Transaction {
  timestamp: number;
  type: 'buy' | 'sell';
  shipId: string;
  commodityId: string;
  amount: number;
  profit: number;
}
6. サーバー・インフラ設計
6.1. API設計 (WebSocket)
クライアントとサーバー間の通信はステートレスなコマンドと、サーバーからの状態更新によって行われる。

クライアント → サーバー (Commands)

buyShip(payload: { type: string; }): 新しい船を購入する。

sellShip(payload: { shipId: string; }): 船を売却する。

toggleShipAI(payload: { shipId: string; enabled: boolean; }): 船のAIのON/OFFを切り替える。

authenticate(payload: { token: string; }): ユーザー認証を行う。

サーバー → クライアント (State Updates)

gameStateUpdate(payload: GameState): ゲーム全体の最新状態を送信する。サーバー側の更新レート（30Hz）に従い、定期的にブロードキャストされる。

notification(payload: { message: string; type: 'info' | 'error'; }): 「新セクター発見」やエラー通知などを送信する。

6.2. ゲームループ
サーバー側のCloudflare Workerで実行されるメインの更新処理。

周期: 60Hz (約16.67ms)

処理内容:

全プレイヤーのDurable Objectに対して更新処理を並行して実行。

各Durable Object内の処理:

船の位置を更新 (距離 = 速度 * 経過時間)。

船がステーションの交易範囲内に入ったか判定し、取引処理を実行。

取引完了/失敗した船に対し、交易AIロジックを再実行させる。

60秒に一度、全ステーションの生産・消費ロジックを実行し、在庫を更新。

在庫変動に伴い、価格を再計算。

プレイヤーのマイルストーンをチェックし、セクター発見ロジックを実行。

更新された GameState をクライアントに送信する（30Hzに間引く）。

7. 非機能要件
項目

要件

実装方針

パフォーマンス

クライアント描画30fps、サーバー更新60Hzを維持する。

WebSocketによる差分更新も検討。サーバー処理はCloudflare WorkersとDurable Objectsにより低遅延を実現。

スケーラビリティ

プレイヤー数の増加に対応できる。

Cloudflareのサーバレスアーキテクチャにより、インフラは自動的にスケールする。Durable Objectsがプレイヤーごとの状態を分離するため、プレイヤー間の影響が少ない。

データ永続性

プレイヤーのゲームデータは消失しない。

Durable Objectsの永続ストレージAPIを利用して、全ての状態変更を確実に保存する。

セキュリティ

不正な操作やチート行為を防止する。

全てのゲームロジックと状態管理をサーバーサイド（Worker/Durable Object）で実行する。クライアントは描画と入力送信のみに責任を持つ。認証にはCloudflare Accessを利用する。