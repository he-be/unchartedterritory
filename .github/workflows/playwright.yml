name: Playwright Tests

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
        
    - name: Cache backend node_modules
      uses: corca-ai/local-cache@v2
      with:
        path: backend/node_modules
        key: backend-deps-${{ hashFiles('backend/package-lock.json') }}
        base: /tmp/cache
          
    - name: Cache frontend node_modules
      uses: corca-ai/local-cache@v2
      with:
        path: frontend/node_modules
        key: frontend-deps-${{ hashFiles('frontend/package-lock.json') }}
        base: /tmp/cache
          
    - name: Check if Playwright browsers exist locally
      id: check-browsers
      run: |
        if [ -d ~/.cache/ms-playwright ] && [ "$(ls -A ~/.cache/ms-playwright)" ]; then
          echo "browsers-exist=true" >> $GITHUB_OUTPUT
          echo "✅ Playwright browsers found in local cache"
        else
          echo "browsers-exist=false" >> $GITHUB_OUTPUT
          echo "❌ Playwright browsers not found, will check GitHub Actions cache"
        fi
        
    - name: Restore Playwright browsers from GitHub Actions cache (if needed)
      if: steps.check-browsers.outputs.browsers-exist == 'false'
      uses: actions/cache/restore@v4
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          playwright-browsers-
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci --prefer-offline
      
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci --prefer-offline
      
    - name: Build frontend assets
      working-directory: ./frontend
      run: npm run build:assets
      
    - name: Check if browsers exist after cache restore
      id: check-browsers-after-cache
      if: steps.check-browsers.outputs.browsers-exist == 'false'
      run: |
        if [ -d ~/.cache/ms-playwright ] && [ "$(ls -A ~/.cache/ms-playwright)" ]; then
          echo "browsers-exist-after-cache=true" >> $GITHUB_OUTPUT
          echo "✅ Playwright browsers restored from GitHub Actions cache"
        else
          echo "browsers-exist-after-cache=false" >> $GITHUB_OUTPUT
          echo "❌ No browsers in cache, will install fresh"
        fi
        
    - name: Install Playwright Browsers (fresh install)
      if: steps.check-browsers.outputs.browsers-exist == 'false' && steps.check-browsers-after-cache.outputs.browsers-exist-after-cache == 'false'
      run: |
        echo "Installing Playwright browsers from scratch..."
        # NOTE: Do NOT use --with-deps flag as it requires sudo privileges
        # and cannot run unattended in CI environments
        npx playwright install chromium
        echo "✅ Playwright browsers installed successfully"
        
    - name: Save Playwright browsers to GitHub Actions cache (if installed)
      if: steps.check-browsers.outputs.browsers-exist == 'false' && steps.check-browsers-after-cache.outputs.browsers-exist-after-cache == 'false'
      uses: actions/cache/save@v4
      with:
        path: ~/.cache/ms-playwright
        key: playwright-browsers-${{ hashFiles('frontend/package-lock.json') }}
      
    - name: Start backend server
      working-directory: ./backend
      run: |
        npx wrangler dev --port 8788 &
        sleep 10
        
    - name: Start simple HTTP proxy for frontend
      run: |
        # Create a simple proxy server that forwards API calls to backend
        cat > proxy-server.js << 'EOF'
        const http = require('http');
        const httpProxy = require('http-proxy');
        const fs = require('fs');
        const path = require('path');
        
        const proxy = httpProxy.createProxyServer({});
        
        const server = http.createServer((req, res) => {
          // Add CORS headers
          res.setHeader('Access-Control-Allow-Origin', '*');
          res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
          res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
          
          if (req.method === 'OPTIONS') {
            res.writeHead(200);
            res.end();
            return;
          }
          
          // Proxy API requests to backend
          if (req.url.startsWith('/api/')) {
            proxy.web(req, res, { target: 'http://localhost:8788' });
          } else {
            // Serve static files
            const filePath = path.join(__dirname, 'frontend/dist/assets', req.url === '/' ? 'index.html' : req.url);
            if (fs.existsSync(filePath)) {
              const content = fs.readFileSync(filePath);
              const ext = path.extname(filePath);
              const contentType = {
                '.html': 'text/html',
                '.js': 'application/javascript',
                '.css': 'text/css',
                '.png': 'image/png',
                '.jpg': 'image/jpeg',
                '.svg': 'image/svg+xml'
              }[ext] || 'text/plain';
              
              res.setHeader('Content-Type', contentType);
              res.writeHead(200);
              res.end(content);
            } else {
              // Fallback to index.html for SPA routing
              const indexPath = path.join(__dirname, 'frontend/dist/assets/index.html');
              if (fs.existsSync(indexPath)) {
                const content = fs.readFileSync(indexPath);
                res.setHeader('Content-Type', 'text/html');
                res.writeHead(200);
                res.end(content);
              } else {
                res.writeHead(404);
                res.end('Not Found');
              }
            }
          }
        });
        
        // Handle WebSocket upgrades
        server.on('upgrade', (req, socket, head) => {
          if (req.url.startsWith('/api/')) {
            proxy.ws(req, socket, head, { target: 'http://localhost:8788' });
          }
        });
        
        server.listen(8787, () => {
          console.log('Proxy server running on port 8787');
        });
        EOF
        
        npm install http-proxy
        node proxy-server.js &
        sleep 5
        
    - name: Run Playwright tests
      working-directory: ./frontend
      run: npx playwright test
      
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30